import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from config.config import settings
from database.database import init_db, AsyncSessionLocal
from database.models import Employee, Message as DBMessage, Notification
from .analytics import AnalyticsService
from .notifications import NotificationService
from .handlers import register_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token)
dp = Dispatcher()


class MessageTracker:
    def __init__(self):
        self.pending_messages = {}  # {chat_id: {message_id: (employee_id, received_at)}}
        self.analytics = AnalyticsService()
        self.notifications = NotificationService(bot)
    
    async def track_message(self, message: Message, employee_id: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        chat_id = message.chat.id
        message_id = message.message_id
        
        if chat_id not in self.pending_messages:
            self.pending_messages[chat_id] = {}
        
        self.pending_messages[chat_id][message_id] = (employee_id, datetime.utcnow())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with AsyncSessionLocal() as session:
            db_message = DBMessage(
                employee_id=employee_id,
                chat_id=chat_id,
                message_id=message_id,
                client_username=message.from_user.username,
                client_name=message.from_user.full_name,
                message_text=message.text,
                received_at=datetime.utcnow()
            )
            session.add(db_message)
            await session.commit()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.schedule_notifications(db_message.id, employee_id, chat_id)
    
    async def mark_as_responded(self, message: Message, employee_id: int):
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ"""
        chat_id = message.chat.id
        
        if chat_id in self.pending_messages:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            for msg_id, (emp_id, received_at) in list(self.pending_messages[chat_id].items()):
                if emp_id == employee_id:
                    response_time = (datetime.utcnow() - received_at).total_seconds() / 60
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                    async with AsyncSessionLocal() as session:
                        result = await session.execute(
                            select(DBMessage).where(
                                and_(
                                    DBMessage.chat_id == chat_id,
                                    DBMessage.message_id == msg_id,
                                    DBMessage.employee_id == employee_id
                                )
                            )
                        )
                        db_message = result.scalar_one_or_none()
                        
                        if db_message:
                            db_message.responded_at = datetime.utcnow()
                            db_message.response_time_minutes = response_time
                            await session.commit()
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
                    del self.pending_messages[chat_id][msg_id]
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    await self.notifications.cancel_notifications(msg_id)
    
    async def schedule_notifications(self, message_id: int, employee_id: int, chat_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        await self.notifications.schedule_warning(
            message_id, employee_id, chat_id,
            settings.response_time_warning_1, 'warning_15'
        )
        await self.notifications.schedule_warning(
            message_id, employee_id, chat_id,
            settings.response_time_warning_2, 'warning_30'
        )
        await self.notifications.schedule_warning(
            message_id, employee_id, chat_id,
            settings.response_time_warning_3, 'warning_60'
        )


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
message_tracker = MessageTracker()


@dp.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîê –í–æ–π—Ç–∏ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å", url=f"http://localhost:{settings.web_port}/auth/telegram?user_id={message.from_user.id}")]
    ])
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n"
        "‚Ä¢ ‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å:",
        reply_markup=keyboard
    )


@dp.message(Command("stats"))
async def stats_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Employee).where(Employee.telegram_id == message.from_user.id)
        )
        employee = result.scalar_one_or_none()
        
        if not employee:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        stats = await message_tracker.analytics.get_employee_stats(employee.id, 'daily')
        
        if stats:
            text = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
            text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {stats.responded_messages}\n"
            text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.missed_messages}\n"
            text += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats.avg_response_time:.1f} –º–∏–Ω\n"
            text += f"‚ö†Ô∏è –û—Ç–≤–µ—Ç–æ–≤ > 15 –º–∏–Ω: {stats.exceeded_15_min}\n"
            text += f"‚ö†Ô∏è –û—Ç–≤–µ—Ç–æ–≤ > 30 –º–∏–Ω: {stats.exceeded_30_min}\n"
            text += f"‚ö†Ô∏è –û—Ç–≤–µ—Ç–æ–≤ > 60 –º–∏–Ω: {stats.exceeded_60_min}"
        else:
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        await message.answer(text)


@dp.message(F.chat.type.in_(['group', 'supergroup']))
async def handle_group_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
    if message.reply_to_message:
        # –≠—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.telegram_id == message.from_user.id)
            )
            employee = result.scalar_one_or_none()
            
            if employee and employee.is_active:
                await message_tracker.mark_as_responded(message, employee.id)
    else:
        # –≠—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–∫–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.is_active == True)
            )
            employees = result.scalars().all()
            
            for employee in employees:
                await message_tracker.track_message(message, employee.id)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_handlers(dp, message_tracker)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main()) 