import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeChat, BotCommandScopeDefault, BotCommandScopeAllGroupChats
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from config.config import settings
from database.database import init_db, AsyncSessionLocal
from database.models import Employee, Message as DBMessage, Notification
from .analytics import AnalyticsService
from .notifications import NotificationService
from .handlers import register_handlers_and_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token)
dp = Dispatcher()


class MessageTracker:
    def __init__(self):
        self.pending_messages = {}  # {chat_id: {message_id: (employee_id, received_at)}}
        self.analytics = AnalyticsService()
        self.notifications = NotificationService(bot)
    
    async def track_message(self, message: Message, employee_id: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        chat_id = message.chat.id
        message_id = message.message_id
        
        if chat_id not in self.pending_messages:
            self.pending_messages[chat_id] = {}
        
        self.pending_messages[chat_id][message_id] = (employee_id, datetime.utcnow())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with AsyncSessionLocal() as session:
            db_message = DBMessage(
                employee_id=employee_id,
                chat_id=chat_id,
                message_id=message_id,
                client_telegram_id=message.from_user.id,
                client_username=message.from_user.username,
                client_name=message.from_user.full_name,
                message_text=message.text,
                received_at=datetime.utcnow()
            )
            session.add(db_message)
            await session.commit()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.schedule_notifications(db_message.id, employee_id, chat_id)
    
    async def mark_as_responded(self, message: Message, employee_id: int):
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ"""
        chat_id = message.chat.id
        
        if chat_id in self.pending_messages:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            for msg_id, (emp_id, received_at) in list(self.pending_messages[chat_id].items()):
                if emp_id == employee_id:
                    response_time = (datetime.utcnow() - received_at).total_seconds() / 60
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                    async with AsyncSessionLocal() as session:
                        result = await session.execute(
                            select(DBMessage).where(
                                and_(
                                    DBMessage.chat_id == chat_id,
                                    DBMessage.message_id == msg_id,
                                    DBMessage.employee_id == employee_id
                                )
                            )
                        )
                        db_message = result.scalar_one_or_none()
                        
                        if db_message:
                            db_message.responded_at = datetime.utcnow()
                            db_message.response_time_minutes = response_time
                            await session.commit()
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
                    del self.pending_messages[chat_id][msg_id]
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    await self.notifications.cancel_notifications(msg_id)
    
    async def mark_as_deleted(self, chat_id: int, message_id: int):
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ"""
        logger.info(f"üóë –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(DBMessage).where(
                    and_(
                        DBMessage.chat_id == chat_id,
                        DBMessage.message_id == message_id
                    )
                )
            )
            db_messages = result.scalars().all()
            
            for db_message in db_messages:
                if not db_message.is_deleted:  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
                    db_message.is_deleted = True
                    db_message.deleted_at = datetime.utcnow()
                    
                    # –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await self.notifications.cancel_notifications(db_message.id)
                    
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {db_message.employee_id}")
            
            await session.commit()
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
        if chat_id in self.pending_messages and message_id in self.pending_messages[chat_id]:
            del self.pending_messages[chat_id][message_id]
    
    async def schedule_notifications(self, message_id: int, employee_id: int, chat_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ NotificationService –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await self.notifications.schedule_warnings_for_message(message_id, employee_id, chat_id)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
message_tracker = MessageTracker()


@dp.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
    if message.chat.type != "private":
        return
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n"
        "‚Ä¢ ‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã\n\n"
        "üîê <b>–î–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å:</b>\n"
        f"1. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:{settings.web_port}/login\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: <code>{message.from_user.id}</code>\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ\n\n"
        "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "‚ö†Ô∏è <i>–í –≥—Ä—É–ø–ø–∞—Ö —è —Ä–∞–±–æ—Ç–∞—é –Ω–µ–∑–∞–º–µ—Ç–Ω–æ - —Ç–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è!</i>",
        parse_mode="HTML"
    )


@dp.message(Command("stats"))
async def stats_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
    if message.chat.type != "private":
        return
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Employee).where(Employee.telegram_id == message.from_user.id)
        )
        employee = result.scalar_one_or_none()
        
        if not employee:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        stats = await message_tracker.analytics.get_employee_stats(employee.id, 'daily')
        
        if stats:
            text = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
            text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {stats['responded_messages']}\n"
            text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['missed_messages']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if stats.get('deleted_messages', 0) > 0:
                text += f"üóë –£–¥–∞–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º–∏: {stats['deleted_messages']}\n"
            
            text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['unique_clients']}\n"
            text += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']:.1f} –º–∏–Ω\n"
            text += f"‚ö†Ô∏è –û—Ç–≤–µ—Ç–æ–≤ > 15 –º–∏–Ω: {stats['exceeded_15_min']}\n"
            text += f"‚ö†Ô∏è –û—Ç–≤–µ—Ç–æ–≤ > 30 –º–∏–Ω: {stats['exceeded_30_min']}\n"
            text += f"‚ö†Ô∏è –û—Ç–≤–µ—Ç–æ–≤ > 60 –º–∏–Ω: {stats['exceeded_60_min']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if stats.get('deleted_messages', 0) > 0:
                text += f"\n\nüí° <i>–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏</i>"
        else:
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        await message.answer(text, parse_mode="HTML")


@dp.message(F.chat.type.in_(['group', 'supergroup']))
async def handle_group_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.new_chat_members or 
        message.left_chat_member or 
        message.new_chat_title or 
        message.new_chat_photo or 
        message.delete_chat_photo or 
        message.group_chat_created or 
        message.supergroup_chat_created or 
        message.channel_chat_created or 
        message.migrate_to_chat_id or 
        message.migrate_from_chat_id or 
        message.pinned_message or
        not message.text):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
        logger.info(f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        return
    
    logger.info(f"üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} –≤ —á–∞—Ç–µ {message.chat.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
    if message.reply_to_message:
        # –≠—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        logger.info(f"üí¨ –û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {message.from_user.full_name}")
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.telegram_id == message.from_user.id)
            )
            employee = result.scalar_one_or_none()
            
            if employee and employee.is_active:
                await message_tracker.mark_as_responded(message, employee.id)
                logger.info(f"‚úÖ –û—Ç–º–µ—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee.full_name}")
            else:
                logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    else:
        # –≠—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {message.from_user.full_name}")
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.is_active == True)
            )
            employees = result.scalars().all()
            
            for employee in employees:
                await message_tracker.track_message(message, employee.id)
                logger.info(f"üìä –¢—Ä–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee.full_name}")


async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    private_commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
        BotCommand(command="stats", description="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    ]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    await bot.set_my_commands(commands=private_commands, scope=BotCommandScopeDefault())
    
    # –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
    await bot.set_my_commands(commands=[], scope=BotCommandScopeAllGroupChats())
    
    logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã - –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, –≥—Ä—É–ø–ø—ã - –±–µ–∑ –º–µ–Ω—é")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await register_handlers_and_scheduler(dp, message_tracker)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await setup_bot_commands()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main()) 