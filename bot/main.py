import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeChat, BotCommandScopeDefault, BotCommandScopeAllGroupChats
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from config.config import settings
from database.database import init_db, AsyncSessionLocal
from database.models import Employee, Message as DBMessage, Notification
from .analytics import AnalyticsService
from .notifications import NotificationService
from .handlers import register_handlers_and_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token)
dp = Dispatcher()


class MessageTracker:
    def __init__(self):
        self.pending_messages = {}  # {chat_id: {telegram_message_id: (employee_id_who_first_got_it, original_received_at)}}
        self.analytics = AnalyticsService()
        self.notifications = NotificationService(bot)
    
    async def track_message(self, message: Message, employee_id: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ —á–∞—Ç–µ.
        """
        chat_id = message.chat.id
        telegram_message_id = message.message_id # ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
        client_telegram_id = message.from_user.id

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º DBMessage –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        async with AsyncSessionLocal() as session:
            db_message = DBMessage(
                employee_id=employee_id,
                chat_id=chat_id,
                message_id=telegram_message_id, # ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
                client_telegram_id=client_telegram_id,
                client_username=message.from_user.username,
                client_name=message.from_user.full_name,
                message_text=message.text,
                received_at=datetime.utcnow()
            )
            session.add(db_message)
            await session.commit()
            # db_message.id —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω (PK –∏–∑ –Ω–∞—à–µ–π –ë–î)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≠–¢–û–ì–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            # (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º, –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –Ω–µ–π —É–∂–µ —Ç–∏–∫–∞—é—Ç)
            
            # –ò—â–µ–º –î–†–£–ì–ò–ï –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ, –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) DBMessage –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ 
            # –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —ç—Ç–æ–º—É –∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –†–ê–ù–¨–®–ï —Ç–µ–∫—É—â–µ–≥–æ.
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ db_message.id, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å (—Ö–æ—Ç—è –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –µ—â–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ scheduled_tasks)
            earlier_active_messages_stmt = select(DBMessage.id).where(
                and_(
                    DBMessage.chat_id == chat_id,
                    DBMessage.client_telegram_id == client_telegram_id,
                    DBMessage.employee_id == employee_id, # –î–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    DBMessage.responded_at.is_(None),
                    DBMessage.is_deleted == False,
                    DBMessage.id != db_message.id, # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    DBMessage.received_at < db_message.received_at # –¢–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–∞–Ω—å—à–µ
                )
            ).limit(1) # –ù–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Å–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
            
            earlier_active_result = await session.execute(earlier_active_messages_stmt)
            already_active_session_for_employee = earlier_active_result.scalar_one_or_none() is not None

            if not already_active_session_for_employee:
                # –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –±—ã–ª–∏ –æ—Ç–≤–µ—á–µ–Ω—ã.
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ db_message.id
                logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è DBMessage.id={db_message.id} (–∫–ª–∏–µ–Ω—Ç {client_telegram_id}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_id}), —Ç.–∫. –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
                await self.notifications.schedule_warnings_for_message(db_message.id, employee_id, chat_id)
            else:
                logger.info(f"–ù–ï –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è DBMessage.id={db_message.id} (–∫–ª–∏–µ–Ω—Ç {client_telegram_id}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_id}), —Ç.–∫. —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è.")

        # –û–±–Ω–æ–≤–ª—è–µ–º pending_messages (—ç—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫—Ç–æ –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º, –µ—Å–ª–∏ —Ä–µ—à–∏–º —Ç–∞–∫ –¥–µ–ª–∞—Ç—å)
        # –ö–ª—é—á: ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram. –ó–Ω–∞—á–µ–Ω–∏–µ: (employee_id –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ UTC)
        # –≠—Ç–∞ —á–∞—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ pending_messages –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π.
        # –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞/—Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º.
        if chat_id not in self.pending_messages:
            self.pending_messages[chat_id] = {}
        
        # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ telegram_message_id –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ pending_messages, 
        # –∏–ª–∏ –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –Ω–æ —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ —Ç–∞–∫–æ–≤–∞),
        # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º. 
        # –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ self.pending_messages –Ω–µ –æ—á–µ–Ω—å —è—Å–Ω–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –±—ã–ª–æ, 
        # –Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, —á—Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.
        if telegram_message_id not in self.pending_messages[chat_id]:
             self.pending_messages[chat_id][telegram_message_id] = (employee_id, datetime.utcnow()) # –í–æ–∑–º–æ–∂–Ω–æ, –∑–¥–µ—Å—å –ª—É—á—à–µ db_message.received_at
             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ Telegram.ID {telegram_message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ pending_messages –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
    async def mark_as_responded(self, employee_reply_message: Message, responding_employee_id: int):
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ.
        –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ–¥–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞,
        –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º–∏ —ç—Ç–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.
        –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —á–∞—Ç–µ."""
        if not employee_reply_message.reply_to_message:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {responding_employee_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º. –ù–µ—á–µ–≥–æ –æ—Ç–º–µ—á–∞—Ç—å.")
            return

        chat_id = employee_reply_message.chat.id
        # ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        replied_to_client_message_telegram_id = employee_reply_message.reply_to_message.message_id
        # ID —Å–∞–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client_telegram_id = employee_reply_message.reply_to_message.from_user.id

        logger.info(f"üîÑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID {responding_employee_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ID {client_telegram_id} (Telegram ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {replied_to_client_message_telegram_id}) –≤ —á–∞—Ç–µ {chat_id}.")

        calculated_response_time = None
        time_response_anchor_message_id = None # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞

        async with AsyncSessionLocal() as session:
            # –ù–∞–π–¥–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ, –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) DBMessage –æ—Ç –≠–¢–û–ì–û –ö–õ–ò–ï–ù–¢–ê –≤ –≠–¢–û–ú –ß–ê–¢–ï, 
            # –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≠–¢–û–ú–£ –û–¢–í–ï–ß–ê–Æ–©–ï–ú–£ –°–û–¢–†–£–î–ù–ò–ö–£.
            # –ù–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –∏–∑ –Ω–∏—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞.
            all_pending_messages_for_this_employee_stmt = select(DBMessage).where(
                and_(
                    DBMessage.chat_id == chat_id,
                    DBMessage.client_telegram_id == client_telegram_id,
                    DBMessage.employee_id == responding_employee_id, # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
                    DBMessage.responded_at.is_(None),
                    DBMessage.is_deleted == False
                )
            ).order_by(DBMessage.received_at.asc()) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è
            
            pending_messages_for_employee_result = await session.execute(all_pending_messages_for_this_employee_stmt)
            pending_db_messages_for_this_employee = pending_messages_for_employee_result.scalars().all()

            if pending_db_messages_for_this_employee:
                # –°–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
                earliest_message_for_this_employee = pending_db_messages_for_this_employee[0]
                if earliest_message_for_this_employee.received_at:
                    calculated_response_time = (datetime.utcnow() - earliest_message_for_this_employee.received_at).total_seconds() / 60
                    time_response_anchor_message_id = earliest_message_for_this_employee.message_id # Telegram ID —ç—Ç–æ–≥–æ —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    logger.info(f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_telegram_id} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {responding_employee_id}: {calculated_response_time:.1f} –º–∏–Ω. (–æ—Ç—Å—á–µ—Ç –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram ID: {time_response_anchor_message_id})")
            else:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_telegram_id} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {responding_employee_id} –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")

            # –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ, –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) DBMessage –æ—Ç –≠–¢–û–ì–û –ö–õ–ò–ï–ù–¢–ê –≤ –≠–¢–û–ú –ß–ê–¢–ï 
            # –¥–ª—è –í–°–ï–• –°–û–¢–†–£–î–ù–ò–ö–û–í, —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å –∏—Ö –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ.
            all_active_messages_from_client_globally_stmt = select(DBMessage).where(
                and_(
                    DBMessage.chat_id == chat_id,
                    DBMessage.client_telegram_id == client_telegram_id, # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    DBMessage.responded_at.is_(None),
                    DBMessage.is_deleted == False
                )
            ).order_by(DBMessage.received_at.asc()) # –î–æ–±–∞–≤–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
            all_active_messages_result = await session.execute(all_active_messages_from_client_globally_stmt)
            all_active_db_messages_from_client_globally = all_active_messages_result.scalars().all()

            if not all_active_db_messages_from_client_globally:
                logger.info(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ID {client_telegram_id} –≤ —á–∞—Ç–µ {chat_id} –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
                # –ï—Å–ª–∏ calculated_response_time –±—ã–ª –≤—ã—á–∏—Å–ª–µ–Ω (—Ç.–µ. –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞), –Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç,
                # —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã —Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
                # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ–π, –µ—Å–ª–∏ pending_db_messages_for_this_employee —É–∂–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —ç—Ç–æ.
                # –ù–æ –æ—Å—Ç–∞–≤–ª—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≥–æ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
                if calculated_response_time is not None:
                    direct_reply_target_stmt = select(DBMessage).where(
                        and_(
                            DBMessage.chat_id == chat_id,
                            DBMessage.message_id == replied_to_client_message_telegram_id, 
                            DBMessage.employee_id == responding_employee_id,
                            DBMessage.responded_at.is_(None)
                        )
                    )
                    direct_reply_target_res = await session.execute(direct_reply_target_stmt)
                    direct_reply_target_db_msg = direct_reply_target_res.scalar_one_or_none()
                    if direct_reply_target_db_msg:
                        direct_reply_target_db_msg.responded_at = datetime.utcnow()
                        direct_reply_target_db_msg.answered_by_employee_id = responding_employee_id
                        direct_reply_target_db_msg.response_time_minutes = calculated_response_time
                        await self.notifications.cancel_notifications(direct_reply_target_db_msg.id)
                        await session.commit()
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ (—á–µ—Ä–µ–∑ –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º) DBMessage.id {direct_reply_target_db_msg.id} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {responding_employee_id}.")
                return

            updated_count = 0
            processed_client_message_telegram_ids_for_pending_removal = set()
            db_message_id_for_notification_cancel = None

            if all_active_db_messages_from_client_globally:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ (–≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ (–¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ø–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
                # –û–¥–Ω–∞–∫–æ, —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ NotificationService —Ö—Ä–∞–Ω–∏—Ç –∑–∞–¥–∞—á–∏ –ø–æ DBMessage.id (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π PK)
                # –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ö–ê–ñ–î–û–ì–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞),
                # —Ç–æ –æ—Ç–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π.

                # –ù–∞–π–¥–µ–º –≤—Å–µ –£–ù–ò–ö–ê–õ–¨–ù–´–ï DBMessage.id, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ú–û–ì–õ–ò –ë–´–¢–¨ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ (—Ç.–µ. —ç—Ç–æ –±—ã–ª–∏ –ø–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
                # –≠—Ç–æ –±—É–¥—É—Ç –≤—Å–µ all_active_db_messages_from_client_globally, —Ç.–∫. –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö (–¥–ª—è –µ–≥–æ employee_id)
                # track_message —Ä–µ—à–∞–ª, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç.
                # –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–º–µ–Ω–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
                # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏ –æ—Ç–º–µ–Ω—è–µ–º.
                pass # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π - –æ—Ç–º–µ–Ω—è–µ–º –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö db_message_to_update.id

            for db_message_to_update in all_active_db_messages_from_client_globally:
                db_message_to_update.responded_at = datetime.utcnow()
                db_message_to_update.answered_by_employee_id = responding_employee_id
                processed_client_message_telegram_ids_for_pending_removal.add(db_message_to_update.message_id) 

                # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (calculated_response_time, –ø–æ—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –æ—Ç –°–ê–ú–û–ì–û –†–ê–ù–ù–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≠–¢–û–ì–û –°–û–¢–†–£–î–ù–ò–ö–ê) 
                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–π –∑–∞–ø–∏—Å–∏ DBMessage, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≠–¢–û–ú–£ –û–¢–í–ï–¢–ò–í–®–ï–ú–£ –°–û–¢–†–£–î–ù–ò–ö–£ 
                # –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –ù–ê –ö–û–¢–û–†–û–ï –û–ù –ù–ï–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–û –û–¢–í–ï–¢–ò–õ (replied_to_client_message_telegram_id).
                # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ response_time —Å—Ç–∞–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
                if db_message_to_update.employee_id == responding_employee_id and \
                   db_message_to_update.message_id == replied_to_client_message_telegram_id and \
                   calculated_response_time is not None:
                    db_message_to_update.response_time_minutes = calculated_response_time
                    logger.info(f"‚è± -> –ó–∞–ø–∏—Å–∞–Ω–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ {calculated_response_time:.1f} –º–∏–Ω –¥–ª—è DBMessage.id {db_message_to_update.id} (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {responding_employee_id}, –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ Telegram ID {replied_to_client_message_telegram_id}). –û—Ç—Å—á–µ—Ç –æ—Ç Telegram ID {time_response_anchor_message_id}.")
                \
                updated_count += 1
                await self.notifications.cancel_notifications(db_message_to_update.id)
            
            await session.commit()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} DBMessage –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–µ—Å—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ID {client_telegram_id} –≤ —á–∞—Ç–µ {chat_id}. –û—Ç–≤–µ—Ç–∏–ª: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ID {responding_employee_id}.")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö `pending_messages` –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        # self.pending_messages —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–µ–Ω, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –ø–æ-–Ω–æ–≤–æ–º—É
        if chat_id in self.pending_messages:
            client_messages_in_pending_keys = list(self.pending_messages[chat_id].keys())
            removed_from_pending_count = 0
            for client_message_telegram_id_key in client_messages_in_pending_keys:
                if client_message_telegram_id_key in processed_client_message_telegram_ids_for_pending_removal:
                    del self.pending_messages[chat_id][client_message_telegram_id_key]
                    removed_from_pending_count +=1
            
            if removed_from_pending_count > 0:
                logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ {removed_from_pending_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ pending_messages –¥–ª—è —á–∞—Ç–∞ {chat_id} (–∫–ª–∏–µ–Ω—Ç {client_telegram_id}).")
            
            if not self.pending_messages[chat_id]: 
                del self.pending_messages[chat_id]
                logger.info(f"üóë –£–¥–∞–ª–µ–Ω –∫–ª—é—á —á–∞—Ç–∞ {chat_id} –∏–∑ pending_messages, —Ç.–∫. –æ–Ω –ø—É—Å—Ç.")
    
    async def mark_as_deleted(self, chat_id: int, message_id: int): # message_id –∑–¥–µ—Å—å —ç—Ç–æ Telegram message_id
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ"""
        logger.info(f"üóë –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.ID={message_id} —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î –í–°–ï –∫–æ–ø–∏–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(DBMessage).where(
                    and_(
                        DBMessage.chat_id == chat_id,
                        DBMessage.message_id == message_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram message_id –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–ø–∏–π
                    )
                )
            )
            db_message_copies = result.scalars().all()

            if not db_message_copies:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ DBMessage –∑–∞–ø–∏—Å–µ–π –¥–ª—è Telegram.ID={message_id} –≤ —á–∞—Ç–µ {chat_id} –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ.")
                return

            deleted_count = 0
            for db_message_copy in db_message_copies:
                if not db_message_copy.is_deleted:  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
                    db_message_copy.is_deleted = True
                    db_message_copy.deleted_at = datetime.utcnow()

                    # –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ DBMessage.id
                    await self.notifications.cancel_notifications(db_message_copy.id)
                    deleted_count += 1
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ DBMessage.id={db_message_copy.id} (Telegram.ID={message_id}) –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {db_message_copy.employee_id}")

            if deleted_count > 0:
                await session.commit()
                logger.info(f"‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ {deleted_count} DBMessage –∑–∞–ø–∏—Å–µ–π –¥–ª—è Telegram.ID={message_id}.")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö pending_messages (–µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á —Ç–∞–º –±—ã–ª)
        if chat_id in self.pending_messages and message_id in self.pending_messages[chat_id]:
            del self.pending_messages[chat_id][message_id]
            logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ –∏–∑ pending_messages: Telegram.ID={message_id} –≤ —á–∞—Ç–µ {chat_id}")
    
    async def schedule_notifications(self, message_id: int, employee_id: int, chat_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ NotificationService –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        await self.notifications.schedule_warnings_for_message(message_id, employee_id, chat_id)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
message_tracker = MessageTracker()


@dp.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
    if message.chat.type != "private":
        return
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n"
        "‚Ä¢ ‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã\n\n"
        "üîê <b>–î–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å:</b>\n"
        f"1. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:{settings.web_port}/login\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: <code>{message.from_user.id}</code>\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ\n\n"
        "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "‚ö†Ô∏è <i>–í –≥—Ä—É–ø–ø–∞—Ö —è —Ä–∞–±–æ—Ç–∞—é –Ω–µ–∑–∞–º–µ—Ç–Ω–æ - —Ç–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è!</i>",
        parse_mode="HTML"
    )


@dp.message(Command("stats"))
async def stats_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    if message.chat.type != "private":
        return
    
    user_telegram_id = message.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Employee).where(Employee.telegram_id == user_telegram_id)
        )
        employee = result.scalar_one_or_none()
        
        if not employee:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: {employee.id} - {employee.full_name}")
        
        from web.services.statistics_service import StatisticsService
        stats_service = StatisticsService(session)
        
        # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_employee_stats ---
        period_start_debug, period_end_debug = stats_service._get_period_dates("today")
        logger.info(f"[DEBUG /stats] –î–ª—è employee_id={employee.id}, –ø–µ—Ä–∏–æ–¥: {period_start_debug} - {period_end_debug}")
        messages_for_stats_debug = await stats_service._get_messages_for_period(employee.id, period_start_debug, period_end_debug)
        logger.info(f"[DEBUG /stats] –°–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ _get_messages_for_period –¥–ª—è employee_id={employee.id} ({len(messages_for_stats_debug)} —à—Ç.):")
        for i, msg_debug in enumerate(messages_for_stats_debug):
            logger.info(f"  [DEBUG MSG {i+1}] id={msg_debug.id}, text='{msg_debug.message_text[:20]}...', received_at={msg_debug.received_at}, responded_at={msg_debug.responded_at}, answered_by={msg_debug.answered_by_employee_id}, deleted={msg_debug.is_deleted}")
        # --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º ---
        
        stats: EmployeeStats = await stats_service.get_employee_stats(employee.id, period="today")
        
        logger.info(f"[DEBUG /stats] –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è employee_id={employee.id}:")
        logger.info(f"  Total: {stats.total_messages}, Responded (by this emp): {stats.responded_messages}, Missed (by this emp): {stats.missed_messages}, Deleted: {stats.deleted_messages}")
        logger.info(f"  Unique Clients: {stats.unique_clients}, Avg Resp Time: {stats.avg_response_time}, Efficiency: {stats.efficiency_percent}")
        logger.info(f"  Exceeded 15/30/60: {stats.exceeded_15_min}/{stats.exceeded_30_min}/{stats.exceeded_60_min}")
        
        if stats:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            today = datetime.now().strftime("%d.%m.%Y")
            
            text = f"üìä <b>–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            text += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {today}\n"
            text += f"üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {employee.full_name}\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            text += f"üì® <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {stats.total_messages}\n"
            text += f"‚úÖ <b>–û—Ç–≤–µ—á–µ–Ω–æ:</b> {stats.responded_messages}\n"
            text += f"‚ùå <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ:</b> {stats.missed_messages}\n"
            text += f"üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</b> {stats.unique_clients}\n"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –¥–ª—è avg_response_time
            avg_response_time_text = f"{stats.avg_response_time:.1f}–º" if stats.avg_response_time is not None else "0.0–º"
            text += f"‚è± <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {avg_response_time_text}\n\n"
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            text += f"‚ö†Ô∏è <b>–û—Ç–≤–µ—Ç–æ–≤ > 15–º:</b> {stats.exceeded_15_min}\n"
            text += f"‚ö†Ô∏è <b>–û—Ç–≤–µ—Ç–æ–≤ > 30–º:</b> {stats.exceeded_30_min}\n"
            text += f"‚ö†Ô∏è <b>–û—Ç–≤–µ—Ç–æ–≤ > 60–º:</b> {stats.exceeded_60_min}\n\n"
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –¥–ª—è efficiency_percent (—Ö–æ—Ç—è –æ–Ω float –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.0 –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
            efficiency_percent_text = f"{stats.efficiency_percent:.1f}%" if stats.efficiency_percent is not None else "0.0%"
            text += f"üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {efficiency_percent_text}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if stats.deleted_messages > 0:
                text += f"\nüóë <b>–£–¥–∞–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º–∏:</b> {stats.deleted_messages}\n"
                text += f"üí° <i>–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏</i>"
        else:
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        if employee.is_admin:
            summary = await stats_service.get_dashboard_overview(user_id=employee.id, is_admin=True, period='today')
            
            text += "\n\nüìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</b>\n\n"
            text += f"üì® <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {summary['total_messages_today']}\n"
            text += f"‚úÖ <b>–û—Ç–≤–µ—á–µ–Ω–æ:</b> {summary['responded_today']}\n"
            text += f"‚ùå <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ:</b> {summary['missed_today']}\n"
            text += f"üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</b> {summary['unique_clients_today']}\n"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –¥–ª—è avg_response_time –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            summary_avg_response_time_text = f"{summary['avg_response_time']:.1f}–º" if summary.get('avg_response_time') is not None else "0.0–º"
            text += f"‚è± <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {summary_avg_response_time_text}\n"
            summary_efficiency_text = f"{summary['efficiency_today']:.1f}%" if summary.get('efficiency_today') is not None else "0.0%"
            text += f"üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {summary_efficiency_text}"
        
        await message.answer(text, parse_mode="HTML")


@dp.message(F.chat.type.in_(['group', 'supergroup']))
async def handle_group_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.new_chat_members or 
        message.left_chat_member or 
        message.new_chat_title or 
        message.new_chat_photo or 
        message.delete_chat_photo or 
        message.group_chat_created or 
        message.supergroup_chat_created or 
        message.channel_chat_created or 
        message.migrate_to_chat_id or 
        message.migrate_from_chat_id or 
        message.pinned_message or
        not message.text):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
        logger.info(f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ/–Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        return
    
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id}) –≤ —á–∞—Ç–µ {message.chat.id}: '{message.text[:50]}...' ")
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
        sender_employee_result = await session.execute(
            select(Employee).where(Employee.telegram_id == message.from_user.id)
        )
        sender_is_employee = sender_employee_result.scalar_one_or_none() is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
    if message.reply_to_message:
        if sender_is_employee:
            # –≠—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {message.from_user.full_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–∏–≤—à–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ (–¥–ª—è employee_id)
            responding_employee_result = await session.execute(
                select(Employee).where(and_(Employee.telegram_id == message.from_user.id, Employee.is_active == True))
            )
            responding_employee = responding_employee_result.scalar_one_or_none()
            
            if responding_employee:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, –∞ –Ω–µ –¥—Ä—É–≥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                if message.reply_to_message.from_user:
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
                    original_sender_employee_result = await session.execute(
                        select(Employee).where(Employee.telegram_id == message.reply_to_message.from_user.id)
                    )
                    original_sender_is_employee = original_sender_employee_result.scalar_one_or_none() is not None
                    
                    if original_sender_is_employee:
                        logger.info(f"üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {responding_employee.full_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
                        return # –ù–µ —Ç—Ä–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

                    await message_tracker.mark_as_responded(message, responding_employee.id)
                    logger.info(f"‚úÖ –û—Ç–º–µ—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {responding_employee.full_name}")
                else:
                    logger.info(f"‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {message.from_user.full_name} (ID: {message.from_user.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –û—Ç–≤–µ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω.")
            else:
                # –≠—Ç–æ –æ—Ç–≤–µ—Ç –ù–ï —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É, –∏–ª–∏ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
                logger.info(f"üë§ –û—Ç–≤–µ—Ç –æ—Ç –ù–ï —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ({message.from_user.full_name}). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
                return
        else: # –≠—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –æ—Ç–≤–µ—Ç)
            if sender_is_employee:
                # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
                logger.info(f"üó£Ô∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {message.from_user.full_name} –≤ –≥—Ä—É–ø–ø–µ. –ù–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                return
    else:
        # –≠—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {message.from_user.full_name}")
        active_employees_result = await session.execute(
                select(Employee).where(Employee.is_active == True)
            )
        active_employees = active_employees_result.scalars().all()
        
        if not active_employees:
            logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {message.from_user.full_name}")
            return

        for employee_obj in active_employees:
            await message_tracker.track_message(message, employee_obj.id)
            logger.info(f"üìä –¢—Ä–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_obj.full_name} (ID: {employee_obj.id})")


async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    private_commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
        BotCommand(command="stats", description="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    ]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    await bot.set_my_commands(commands=private_commands, scope=BotCommandScopeDefault())
    
    # –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
    await bot.set_my_commands(commands=[], scope=BotCommandScopeAllGroupChats())
    
    logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã - –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, –≥—Ä—É–ø–ø—ã - –±–µ–∑ –º–µ–Ω—é")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await register_handlers_and_scheduler(dp, message_tracker)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await setup_bot_commands()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main()) 