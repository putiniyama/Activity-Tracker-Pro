from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from database.database import AsyncSessionLocal
from database.models import Employee
from .scheduler import setup_scheduler


def register_handlers(dp: Dispatcher, message_tracker):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(Command("help"))
    async def help_command(message: Message):
        """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –≤—Ö–æ–¥ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª—å
/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/report_weekly - –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
/report_monthly - –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–ª–≥–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã

<b>–í–µ–±-–ø–∞–Ω–µ–ª—å:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Ö–æ–¥
        """
        await message.answer(help_text, parse_mode="HTML")
    
    @dp.message(Command("report_weekly"))
    async def weekly_report_command(message: Message):
        """–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.telegram_id == message.from_user.id)
            )
            employee = result.scalar_one_or_none()
            
            if not employee:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            stats = await message_tracker.analytics.get_employee_stats(employee.id, 'weekly')
            
            if stats:
                text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n"
                text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
                text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {stats.responded_messages}\n"
                text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.missed_messages}\n"
                
                if stats.responded_messages > 0:
                    text += f"\n‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats.avg_response_time:.1f} –º–∏–Ω\n"
                    text += f"\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 15 –º–∏–Ω: {stats.exceeded_15_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 30 –º–∏–Ω: {stats.exceeded_30_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 1 —á–∞—Å–∞: {stats.exceeded_60_min}"
                
                # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if stats.total_messages > 0:
                    efficiency = (stats.responded_messages / stats.total_messages) * 100
                    text += f"\n\nüìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%"
            else:
                text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            await message.answer(text, parse_mode="HTML")
    
    @dp.message(Command("report_monthly"))
    async def monthly_report_command(message: Message):
        """–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"""
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.telegram_id == message.from_user.id)
            )
            employee = result.scalar_one_or_none()
            
            if not employee:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            stats = await message_tracker.analytics.get_employee_stats(employee.id, 'monthly')
            
            if stats:
                text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:</b>\n\n"
                text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
                text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {stats.responded_messages}\n"
                text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.missed_messages}\n"
                
                if stats.responded_messages > 0:
                    text += f"\n‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats.avg_response_time:.1f} –º–∏–Ω\n"
                    text += f"\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 15 –º–∏–Ω: {stats.exceeded_15_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 30 –º–∏–Ω: {stats.exceeded_30_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 1 —á–∞—Å–∞: {stats.exceeded_60_min}"
                
                # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
                if stats.total_messages > 0:
                    efficiency = (stats.responded_messages / stats.total_messages) * 100
                    avg_daily = stats.total_messages / 30  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                    
                    text += f"\n\nüìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%"
                    text += f"\nüìÖ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {avg_daily:.1f} —Å–æ–æ–±—â–µ–Ω–∏–π"
            else:
                text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            await message.answer(text, parse_mode="HTML")
    
    @dp.message(Command("admin_stats"))
    async def admin_stats_command(message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(
                    Employee.telegram_id == message.from_user.id,
                    Employee.is_admin == True
                )
            )
            admin = result.scalar_one_or_none()
            
            if not admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employees_result = await session.execute(
                select(Employee).where(Employee.is_active == True)
            )
            employees = employees_result.scalars().all()
            
            text = "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
            
            total_messages = 0
            total_responded = 0
            total_missed = 0
            
            for employee in employees:
                stats = await message_tracker.analytics.get_employee_stats(employee.id, 'daily')
                
                if stats:
                    text += f"üë§ <b>{employee.full_name}</b>\n"
                    text += f"  üì® –°–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
                    text += f"  ‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {stats.responded_messages}\n"
                    text += f"  ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.missed_messages}\n"
                    
                    if stats.responded_messages > 0:
                        text += f"  ‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats.avg_response_time:.1f} –º–∏–Ω\n"
                    
                    text += "\n"
                    
                    total_messages += stats.total_messages
                    total_responded += stats.responded_messages
                    total_missed += stats.missed_messages
            
            text += f"\nüìä <b>–ò—Ç–æ–≥–æ:</b>\n"
            text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {total_responded}\n"
            text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total_missed}\n"
            
            if total_messages > 0:
                overall_efficiency = (total_responded / total_messages) * 100
                text += f"üìà –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {overall_efficiency:.1f}%"
            
            await message.answer(text, parse_mode="HTML")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    setup_scheduler(message_tracker) 