import asyncio
from datetime import datetime, timedelta
from typing import Dict, List
from aiogram import Bot
from sqlalchemy import select
from database.database import AsyncSessionLocal
from database.models import Employee, Message, Notification
from .settings_manager import settings_manager
import logging

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduled_tasks: Dict[int, List[asyncio.Task]] = {}  # message_id: [tasks]
    
    async def schedule_warnings_for_message(self, message_id: int, employee_id: int, chat_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not await settings_manager.notifications_enabled():
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
        delay1, delay2, delay3 = await settings_manager.get_notification_delays()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await self.schedule_warning(message_id, employee_id, chat_id, delay1, "warning_15")
        await self.schedule_warning(message_id, employee_id, chat_id, delay2, "warning_30")
        await self.schedule_warning(message_id, employee_id, chat_id, delay3, "warning_60")
    
    async def schedule_warning(self, message_id: int, employee_id: int, 
                             chat_id: int, delay_minutes: int, notification_type: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        task = asyncio.create_task(
            self._send_delayed_warning(message_id, employee_id, chat_id, delay_minutes, notification_type)
        )
        
        if message_id not in self.scheduled_tasks:
            self.scheduled_tasks[message_id] = []
        
        self.scheduled_tasks[message_id].append(task)
    
    async def _send_delayed_warning(self, message_id: int, employee_id: int, 
                                  chat_id: int, delay_minutes: int, notification_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        try:
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
            await asyncio.sleep(delay_minutes * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—á–µ–Ω–æ
            async with AsyncSessionLocal() as session:
                result = await session.execute(
                    select(Message).where(Message.id == message_id)
                )
                message = result.scalar_one_or_none()
                
                if message and not message.responded_at:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
                    emp_result = await session.execute(
                        select(Employee).where(Employee.id == employee_id)
                    )
                    employee = emp_result.scalar_one_or_none()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ = –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö/–≤ –æ—Ç–ø—É—Å–∫–µ/–Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º
                    if employee and employee.is_active:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        warning_text = self._get_warning_text(delay_minutes, message)
                        
                        try:
                            await self.bot.send_message(
                                employee.telegram_id,
                                warning_text,
                                parse_mode="HTML"
                            )
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
                            notification = Notification(
                                employee_id=employee_id,
                                notification_type=notification_type,
                                message_id=message_id
                            )
                            session.add(notification)
                            await session.commit()
                            
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id} —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω")
                            
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")
                    else:
                        if employee and not employee.is_active:
                            logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–≤—ã—Ö–æ–¥–Ω–æ–π/–æ—Ç–ø—É—Å–∫) - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    if message and message.responded_at:
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–æ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        except asyncio.CancelledError:
            # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–≤–µ—á–µ–Ω–æ)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
            pass
        
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
            if message_id in self.scheduled_tasks:
                self.scheduled_tasks[message_id] = [
                    t for t in self.scheduled_tasks[message_id] if not t.done()
                ]
    
    async def cancel_notifications(self, message_id: int):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message_id in self.scheduled_tasks:
            for task in self.scheduled_tasks[message_id]:
                if not task.done():
                    task.cancel()
            
            del self.scheduled_tasks[message_id]
    
    def _get_warning_text(self, delay_minutes: int, message: Message) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        client_info = f"@{message.client_username}" if message.client_username else message.client_name
        
        # –í—ã–±–∏—Ä–∞–µ–º emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if delay_minutes <= 5:
            emoji = "‚ö†Ô∏è"
        elif delay_minutes <= 15:
            emoji = "üö®"
        else:
            emoji = "üî¥"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
        if delay_minutes == 1:
            urgency = "1 –º–∏–Ω—É—Ç—É"
        elif delay_minutes < 5:
            urgency = f"{delay_minutes} –º–∏–Ω—É—Ç—ã"
        elif delay_minutes < 60:
            urgency = f"{delay_minutes} –º–∏–Ω—É—Ç"
        elif delay_minutes == 60:
            urgency = "1 —á–∞—Å"
        else:
            hours = delay_minutes // 60
            minutes = delay_minutes % 60
            if minutes == 0:
                urgency = f"{hours} —á–∞—Å{'–∞' if hours < 5 else '–æ–≤'}"
            else:
                urgency = f"{hours} —á–∞—Å{'–∞' if hours < 5 else '–æ–≤'} {minutes} –º–∏–Ω"
        
        text = f"{emoji} <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        text += f"–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {client_info} —É–∂–µ <b>{urgency}</b>!\n"
        text += f"–ß–∞—Ç ID: <code>{message.chat_id}</code>\n"
        
        if message.message_text:
            preview = message.message_text[:100] + "..." if len(message.message_text) > 100 else message.message_text
            text += f"\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n<i>{preview}</i>"
        
        return text
    
    async def send_daily_report(self, employee_id: int, stats):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        if not await settings_manager.daily_reports_enabled():
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
            
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Employee).where(Employee.id == employee_id)
            )
            employee = result.scalar_one_or_none()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
            if not employee or not employee.is_active:
                if employee and not employee.is_active:
                    logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–ª–æ–≤–∞—Ä—å –∏ –æ–±—ä–µ–∫—Ç
            if isinstance(stats, dict):
                total_messages = stats.get('total_messages', 0)
                responded_messages = stats.get('responded_messages', 0) 
                missed_messages = stats.get('missed_messages', 0)
                unique_clients = stats.get('unique_clients', 0)
                avg_response_time = stats.get('avg_response_time', 0)
                exceeded_15_min = stats.get('exceeded_15_min', 0)
                exceeded_30_min = stats.get('exceeded_30_min', 0)
                exceeded_60_min = stats.get('exceeded_60_min', 0)
            else:
                # –û–±—ä–µ–∫—Ç —Å–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                total_messages = stats.total_messages
                responded_messages = stats.responded_messages
                missed_messages = stats.missed_messages
                unique_clients = stats.unique_clients
                avg_response_time = stats.avg_response_time
                exceeded_15_min = stats.exceeded_15_min
                exceeded_30_min = stats.exceeded_30_min
                exceeded_60_min = stats.exceeded_60_min
            
            text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
            text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {responded_messages}\n"
            text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missed_messages}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if isinstance(stats, dict):
                deleted_messages = stats.get('deleted_messages', 0)
            else:
                deleted_messages = getattr(stats, 'deleted_messages', 0)
            
            if deleted_messages > 0:
                text += f"üóë –£–¥–∞–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º–∏: {deleted_messages}\n"
            
            text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {unique_clients}\n"
            
            if responded_messages > 0:
                text += f"\n‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.1f} –º–∏–Ω\n"
                
                if exceeded_15_min > 0:
                    text += f"\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 15 –º–∏–Ω: {exceeded_15_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 30 –º–∏–Ω: {exceeded_30_min}\n"
                    text += f"  ‚Ä¢ –ë–æ–ª–µ–µ 1 —á–∞—Å–∞: {exceeded_60_min}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç—ã
            if missed_messages == 0 and avg_response_time < 15:
                text += "\nüåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            elif missed_messages > 0:
                text += f"\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if deleted_messages > 0:
                text += f"\n\nüí° <i>–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏</i>"
            
            try:
                await self.bot.send_message(
                    employee.telegram_id,
                    text,
                    parse_mode="HTML"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")
    
    async def send_admin_report(self, admin_id: int, all_stats):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        if not await settings_manager.daily_reports_enabled():
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return
            
        text = "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</b>\n\n"
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è
        def get_stat_value(stat, key):
            if isinstance(stat, dict):
                return stat.get(key, 0)
            else:
                return getattr(stat, key, 0)
        
        total_messages = sum(get_stat_value(s, 'total_messages') for s in all_stats)
        total_responded = sum(get_stat_value(s, 'responded_messages') for s in all_stats)
        total_missed = sum(get_stat_value(s, 'missed_messages') for s in all_stats)
        total_unique_clients = sum(get_stat_value(s, 'unique_clients') for s in all_stats)
        
        text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        text += f"‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {total_responded}\n"
        text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total_missed}\n"
        text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_unique_clients}\n"
        
        if total_responded > 0:
            avg_response = sum(get_stat_value(s, 'avg_response_time') * get_stat_value(s, 'responded_messages') for s in all_stats) / total_responded
            text += f"‚è± –°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: {avg_response:.1f} –º–∏–Ω\n"
        
        text += "\n<b>–ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</b>\n"
        
        for stat in all_stats:
            # –ü–æ–ª—É—á–∞–µ–º employee_id
            employee_id = get_stat_value(stat, 'employee_id')
            
            async with AsyncSessionLocal() as session:
                result = await session.execute(
                    select(Employee).where(Employee.id == employee_id)
                )
                employee = result.scalar_one_or_none()
                
                if employee:
                    status_emoji = "‚úÖ" if employee.is_active else "üí§"
                    status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if employee.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                    
                    text += f"\n{status_emoji} {employee.full_name} ({status_text}):\n"
                    text += f"  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {get_stat_value(stat, 'total_messages')}\n"
                    text += f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {get_stat_value(stat, 'missed_messages')}\n"
                    text += f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {get_stat_value(stat, 'unique_clients')}\n"
                    if get_stat_value(stat, 'responded_messages') > 0:
                        text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {get_stat_value(stat, 'avg_response_time'):.1f} –º–∏–Ω\n"
        
        try:
            await self.bot.send_message(
                admin_id,
                text,
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}") 