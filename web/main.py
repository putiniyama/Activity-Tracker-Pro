from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.exceptions import HTTPException
from pydantic import BaseModel
import uvicorn
import aiohttp
import random
from datetime import datetime, timedelta
import logging

from config.config import settings
from database.database import init_db, get_db
from database.models import Employee, Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from .routers import auth, employees, statistics, dashboard
from .routes import settings as settings_router
from .auth import get_current_user, create_access_token
from web.templates import templates

app = FastAPI(title="–¢—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", version="1.0.0")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="web/static"), name="static")

# –®–∞–±–ª–æ–Ω—ã
templates = Jinja2Templates(directory="web/templates")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
verification_codes = {}

class SendCodeRequest(BaseModel):
    telegram_id: int

class VerifyCodeRequest(BaseModel):
    telegram_id: int
    code: str

@app.post("/send-code")
async def send_verification_code(
    request: SendCodeRequest,
    db: AsyncSession = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram"""
    try:
        print(f"[DEBUG] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: {request.telegram_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        result = await db.execute(
            select(Employee).where(Employee.telegram_id == request.telegram_id)
        )
        employee = result.scalar_one_or_none()
        
        print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {employee}")
        if employee:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={employee.id}, Name={employee.full_name}, Active={employee.is_active}")
        
        if not employee:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {request.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return JSONResponse(
                status_code=400,
                content={"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        code = str(random.randint(100000, 999999))
        expires_at = datetime.utcnow() + timedelta(minutes=5)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
        verification_codes[request.telegram_id] = {
            "code": code,
            "expires_at": expires_at,
            "attempts": 0
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Telegram Bot API
        bot_token = settings.bot_token
        if not bot_token:
            return JSONResponse(
                status_code=500,
                content={"success": False, "error": "BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
            )
            
        message = f"""üîê <b>–ö–æ–¥ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>


<code>{code}</code> 


üì± <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç
üõ°Ô∏è –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥
üíª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ

<i>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥ - –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>"""
        
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": request.telegram_id,
                "text": message,
                "parse_mode": "HTML"
            }
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    return JSONResponse(content={
                        "success": True, 
                        "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∞—à Telegram",
                        "expires_in": 300
                    })
                else:
                    return JSONResponse(
                        status_code=400,
                        content={"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"}
                    )
                    
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}
        )

@app.post("/verify-code")
async def verify_code(
    request: VerifyCodeRequest,
    response: JSONResponse,
    db: AsyncSession = Depends(get_db)
):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞
        if request.telegram_id not in verification_codes:
            return JSONResponse(
                status_code=400,
                content={"success": False, "error": "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫"}
            )
        
        stored_data = verification_codes[request.telegram_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if datetime.utcnow() > stored_data["expires_at"]:
            del verification_codes[request.telegram_id]
            return JSONResponse(
                status_code=400,
                content={"success": False, "error": "–ö–æ–¥ –∏—Å—Ç–µ–∫"}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if stored_data["attempts"] >= 3:
            del verification_codes[request.telegram_id]
            return JSONResponse(
                status_code=400,
                content={"success": False, "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if request.code != stored_data["code"]:
            stored_data["attempts"] += 1
            return JSONResponse(
                status_code=400,
                content={"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}
            )
        
        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        del verification_codes[request.telegram_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(Employee).where(Employee.telegram_id == request.telegram_id)
        )
        employee = result.scalar_one_or_none()
        
        if not employee:
            return JSONResponse(
                status_code=400,
                content={"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        access_token = create_access_token(data={
            "sub": str(employee.telegram_id),
            "employee_id": employee.id,
            "telegram_id": employee.telegram_id,
            "telegram_username": employee.telegram_username,
            "full_name": employee.full_name,
            "is_active": employee.is_active,
            "is_admin": employee.is_admin
        })
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º –≤ cookies
        redirect_url = "/admin" if employee.is_admin else "/dashboard"
        
        response = JSONResponse(content={
            "success": True,
            "message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "redirect": redirect_url,
            "user": {
                "employee_id": employee.id,
                "telegram_id": employee.telegram_id,
                "telegram_username": employee.telegram_username,
                "full_name": employee.full_name,
                "is_active": employee.is_active,
                "is_admin": employee.is_admin,
                "created_at": employee.created_at.isoformat() if employee.created_at else None,
                "updated_at": employee.updated_at.isoformat() if employee.updated_at else None
            }
        })
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
        response.set_cookie(
            key="access_token",
            value=access_token,
            max_age=1800,  # 30 –º–∏–Ω—É—Ç
            httponly=True,
            secure=False,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True
            samesite="lax"
        )
        
        return response
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}
        )

@app.get("/logout")
async def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    response = RedirectResponse(url="/login", status_code=302)
    response.delete_cookie(key="access_token")
    return response

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard_page(request: Request, current_user: dict = Depends(get_current_user), db: AsyncSession = Depends(get_db)):
    """–î–∞—à–±–æ—Ä–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ï–î–ò–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–•"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    from web.services.statistics_service import StatisticsService
    
    if current_user.get("is_admin"):
        # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
        return templates.TemplateResponse("dashboard.html", {
            "request": request,
            "userInfo": current_user
        })
    else:
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        employee_id = current_user.get('employee_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ employee_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if employee_id is None:
            # –ï—Å–ª–∏ employee_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
            return RedirectResponse(url="/login?error=–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", status_code=302)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_service = StatisticsService(db)
            stats = await stats_service.get_employee_stats(
                employee_id=employee_id,
                period="today",
                start_date=datetime.now().date(),
                end_date=datetime.now().date()
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_result = await db.execute(
                select(Message).where(
                    and_(
                        Message.employee_id == employee_id,
                        Message.message_type == "client"
                    )
                ).order_by(Message.received_at.desc()).limit(10)
            )
            recent_messages = messages_result.scalars().all()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_obj = {
                'total_messages': stats.total_messages,
                'responded_messages': stats.responded_messages,
                'missed_messages': stats.missed_messages,
                'avg_response_time': stats.avg_response_time or 0,
                'exceeded_15_min': stats.exceeded_15_min,
                'exceeded_30_min': stats.exceeded_30_min,
                'exceeded_60_min': stats.exceeded_60_min,
                'efficiency_percent': stats.efficiency_percent or 0,
                'response_rate': stats.response_rate or 0,
                'unique_clients': stats.unique_clients or 0
            }
            
            return templates.TemplateResponse("employee_dashboard.html", {
                "request": request,
                "user": current_user,
                "stats": stats_obj,
                "recent_messages": recent_messages
            })
            
        except ValueError as e:
            # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
            return RedirectResponse(url="/login?error=–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", status_code=302)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_obj = {
                'total_messages': 0,
                'responded_messages': 0,
                'missed_messages': 0,
                'avg_response_time': 0,
                'exceeded_15_min': 0,
                'exceeded_30_min': 0,
                'exceeded_60_min': 0,
                'efficiency_percent': 0,
                'response_rate': 0,
                'unique_clients': 0
            }
            
            return templates.TemplateResponse("employee_dashboard.html", {
                "request": request,
                "user": current_user,
                "stats": stats_obj,
                "recent_messages": []
            })

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/auth", tags=["auth"])
app.include_router(employees.router, prefix="/api/employees", tags=["employees"])
app.include_router(statistics.router, prefix="/api/statistics", tags=["statistics"])
app.include_router(dashboard.router, prefix="/api/dashboard", tags=["dashboard"])
app.include_router(settings_router.router)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@app.exception_handler(HTTPException)
async def auth_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü"""
    # –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /api/) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—à–∏–±–∫—É
    if request.url.path.startswith("/api/"):
        return JSONResponse(
            status_code=exc.status_code,
            content={"detail": exc.detail}
        )
    
    # –î–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω –ø—Ä–∏ 401 –æ—à–∏–±–∫–µ
    if exc.status_code == 401 and request.url.path in ["/admin", "/dashboard", "/settings", "/employees", "/statistics"]:
        return RedirectResponse(url="/login?error=" + exc.detail.replace(" ", "%20"), status_code=302)
    
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    raise exc


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await init_db()


@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω"""
    return templates.TemplateResponse("telegram_login.html", {"request": request})


@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram"""
    return templates.TemplateResponse("telegram_login.html", {"request": request})


@app.get("/employees", response_class=HTMLResponse)
async def employees_page(request: Request, current_user: dict = Depends(get_current_user)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    return templates.TemplateResponse("employees.html", {
        "request": request,
        "userInfo": current_user
    })


@app.get("/statistics", response_class=HTMLResponse)
async def statistics_page(request: Request, current_user: dict = Depends(get_current_user)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not current_user.get("is_admin"):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    return templates.TemplateResponse("statistics.html", {
        "request": request,
        "userInfo": current_user
    })


@app.get("/profile", response_class=HTMLResponse)
async def profile_page(request: Request, current_user: dict = Depends(get_current_user)):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if not current_user.get("is_admin"):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    return templates.TemplateResponse("profile.html", {
        "request": request,
        "userInfo": current_user
    })


@app.get("/settings", response_class=HTMLResponse)
async def settings_page(request: Request, current_user: dict = Depends(get_current_user)):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    return templates.TemplateResponse("settings.html", {
        "request": request,
        "userInfo": current_user
    })


@app.get("/admin", response_class=HTMLResponse)
async def admin_page(request: Request, current_user: dict = Depends(get_current_user)):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if not current_user.get("is_admin"):
        # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        return templates.TemplateResponse("redirect.html", {
            "request": request,
            "redirect_url": "/dashboard",
            "message": "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç..."
        })
    
    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "userInfo": current_user
    })


# –†–æ—É—Ç–µ—Ä /dashboard –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ employee.router


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {"status": "ok", "message": "–¢—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ is running"}


@app.get("/test-auth")
async def test_auth(current_user: dict = Depends(get_current_user)):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return {"user": current_user}


@app.get("/debug-config")
async def debug_config():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return {
        "database_url": settings.database_url,
        "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"
    }


if __name__ == "__main__":
    uvicorn.run(
        "web.main:app",
        host=settings.web_host,
        port=settings.web_port,
        reload=True
    ) 