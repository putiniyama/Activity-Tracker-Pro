"""–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""

import hashlib
import hmac
import json
import os
import random
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict

from fastapi import APIRouter, Request, HTTPException, Depends, Form, Response
from fastapi.responses import RedirectResponse
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import aiohttp

from database.database import get_db
from database.models import Employee
from web.auth import create_access_token, get_current_user
import logging

logger = logging.getLogger(__name__)

router = APIRouter()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "8110382002:AAHuWex2O-QvW7ElqyOMu1ZHJEGiS8dSGmE")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ {telegram_id: {"code": "123456", "expires": datetime, "attempts": 0}}
verification_codes: Dict[int, dict] = {}

# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class SendCodeRequest(BaseModel):
    telegram_id: int

class VerifyCodeRequest(BaseModel):
    telegram_id: int
    code: str


async def send_telegram_message(telegram_id: int, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json={
                "chat_id": telegram_id,
                "text": message,
                "parse_mode": "HTML"
            }) as response:
                result = await response.json()
                return result.get("ok", False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {telegram_id}: {e}")
        return False


def generate_verification_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return f"{random.randint(100000, 999999)}"


def cleanup_expired_codes():
    """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã"""
    now = datetime.utcnow()
    expired_ids = []
    
    for telegram_id, data in verification_codes.items():
        if data["expires"] < now:
            expired_ids.append(telegram_id)
    
    for telegram_id in expired_ids:
        del verification_codes[telegram_id]


@router.post("/send-code")
async def send_verification_code(
    request: SendCodeRequest,
    db: AsyncSession = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Telegram"""
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
    cleanup_expired_codes()
    
    telegram_id = request.telegram_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    result = await db.execute(
        select(Employee).where(Employee.telegram_id == telegram_id)
    )
    employee = result.scalar_one_or_none()
    
    if not employee:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return {
            "success": False,
            "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "message": f"Telegram ID {telegram_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        }
    
    if not employee.is_active:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.full_name}")
        return {
            "success": False,
            "error": "–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", 
            "message": "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 3 –∫–æ–¥–æ–≤ –≤ —á–∞—Å)
    now = datetime.utcnow()
    recent_attempts = [
        data for data in verification_codes.values() 
        if data.get("created", now) > now - timedelta(hours=1)
    ]
    
    if len(recent_attempts) >= 3:
        return {
            "success": False,
            "error": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫",
            "message": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å."
        }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    code = generate_verification_code()
    expires = now + timedelta(minutes=5)  # –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    verification_codes[telegram_id] = {
        "code": code,
        "expires": expires,
        "attempts": 0,
        "created": now,
        "employee_name": employee.full_name
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""üîê <b>–ö–æ–¥ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <code>{code}</code>

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç
üõ°Ô∏è –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥
üíª –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ

<i>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥ - –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram
    sent = await send_telegram_message(telegram_id, message)
    
    if not sent:
        # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        verification_codes.pop(telegram_id, None)
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        }
    
    logger.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {employee.full_name} (ID: {telegram_id})")
    
    return {
        "success": True,
        "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∞—à Telegram",
        "expires_in": 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    }


@router.post("/verify-code")
async def verify_code_and_login(
    request: VerifyCodeRequest,
    response: Response,
    db: AsyncSession = Depends(get_db)
):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
    cleanup_expired_codes()
    
    telegram_id = request.telegram_id
    entered_code = request.code.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞
    if telegram_id not in verification_codes:
        return {
            "success": False,
            "error": "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "message": "–ö–æ–¥ –Ω–µ –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
        }
    
    stored_data = verification_codes[telegram_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if stored_data["attempts"] >= 3:
        del verification_codes[telegram_id]
        return {
            "success": False,
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫",
            "message": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥."
        }
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    stored_data["attempts"] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if stored_data["code"] != entered_code:
        return {
            "success": False,
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥",
            "message": f"–ö–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - stored_data['attempts']}"
        }
    
    # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - —É–¥–∞–ª—è–µ–º –µ–≥–æ
    del verification_codes[telegram_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    result = await db.execute(
        select(Employee).where(Employee.telegram_id == telegram_id)
    )
    employee = result.scalar_one_or_none()
    
    if not employee or not employee.is_active:
        return {
            "success": False,
            "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "message": "–ê–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        }
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    access_token = create_access_token(
        data={
            "sub": str(employee.telegram_id),
            "employee_id": employee.id,
            "is_admin": employee.is_admin,
            "username": employee.telegram_username or "",
            "full_name": employee.full_name
        }
    )
    
    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {employee.full_name} (ID: {telegram_id})")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
    response.set_cookie(
        key="access_token",
        value=f"Bearer {access_token}",
        httponly=True,
        max_age=1800,  # 30 –º–∏–Ω—É—Ç
        samesite="lax",  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å "strict" –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        secure=False,    # –î–ª—è localhost
        path="/",        # –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ–≥–æ —Å–∞–π—Ç–∞
        domain=None      # –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞ (localhost –∏–ª–∏ 0.0.0.0)
    )
    
    logger.info(f"Cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.full_name}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
    success_message = f"""‚úÖ <b>–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {employee.full_name}!

üïê –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üõ°Ô∏è –°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç

–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {'–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' if employee.is_admin else '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'}."""
    
    await send_telegram_message(telegram_id, success_message)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ redirect
    return {
        "success": True,
        "user": {
            "id": employee.telegram_id,
            "username": employee.telegram_username,
            "full_name": employee.full_name,
            "is_admin": employee.is_admin
        },
        "redirect": "/admin" if employee.is_admin else "/dashboard"
    }


@router.get("/logout")
async def logout(response: Response):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    response.delete_cookie("access_token")
    return RedirectResponse(url="/login", status_code=302)


@router.get("/auth-status")
async def auth_status(current_user: dict = Depends(get_current_user)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return {
        "authenticated": True,
        "user": current_user
    }


@router.get("/verification-stats")
async def verification_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    cleanup_expired_codes()
    return {
        "active_codes": len(verification_codes),
        "codes": {
            str(k): {
                "expires": v["expires"].isoformat(),
                "attempts": v["attempts"],
                "employee": v["employee_name"]
            } for k, v in verification_codes.items()
        }
    }


@router.get("/debug-auth")
async def debug_auth(request: Request):
    """–û—Ç–ª–∞–¥–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ cookies"""
    cookies = dict(request.cookies)
    headers = dict(request.headers)
    
    try:
        current_user = await get_current_user(request)
        auth_status = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        user_info = current_user
    except Exception as e:
        auth_status = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        user_info = None
    
    return {
        "auth_status": auth_status,
        "user_info": user_info,
        "cookies": cookies,
        "has_access_token": "access_token" in cookies,
        "user_agent": headers.get("user-agent"),
        "host": headers.get("host")
    } 