"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import asyncio
from datetime import datetime, timedelta
from database.database import AsyncSessionLocal
from database.models import Message, Employee
from sqlalchemy import select
import random

async def create_test_messages():
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        result = await session.execute(select(Employee))
        employees = result.scalars().all()
        
        if not employees:
            print("‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ")
            return
        
        print(f"üìß –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
        
        # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
        for days_ago in range(3):
            date = datetime.utcnow() - timedelta(days=days_ago)
            
            for employee in employees:
                # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                num_messages = random.randint(3, 8)
                
                for i in range(num_messages):
                    # –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    msg_time = date.replace(
                        hour=random.randint(9, 18),
                        minute=random.randint(0, 59),
                        second=random.randint(0, 59)
                    )
                    
                    # –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–≤–µ—á–µ–Ω–æ –ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    is_responded = random.choice([True, True, True, False])  # 75% –æ—Ç–≤–µ—á–µ–Ω–æ
                    
                    response_time = None
                    responded_at = None
                    
                    if is_responded:
                        # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç 2 –¥–æ 45 –º–∏–Ω—É—Ç
                        response_time = random.uniform(2, 45)
                        responded_at = msg_time + timedelta(minutes=response_time)
                    
                    message = Message(
                        employee_id=employee.id,
                        chat_id=random.randint(100000, 999999),
                        message_id=random.randint(1000, 9999),
                        client_username=f"client_{random.randint(1, 100)}",
                        client_name=f"–ö–ª–∏–µ–Ω—Ç {random.randint(1, 100)}",
                        message_text=f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{i+1}",
                        message_type="client",
                        received_at=msg_time,
                        responded_at=responded_at,
                        response_time_minutes=response_time,
                        is_missed=not is_responded
                    )
                    
                    session.add(message)
                
                print(f"   üìÖ {date.date()} - {employee.full_name}: {num_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        await session.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        result = await session.execute(select(Message))
        all_messages = result.scalars().all()
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ: {len(all_messages)}")

if __name__ == "__main__":
    asyncio.run(create_test_messages()) 